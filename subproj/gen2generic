import groovy.json.JsonBuilder
import groovy.json.JsonSlurper


// Globals


def service_git_url='https://github.com/WPPg2/avatar-reg.git'
def service_git_credentialsId='7a9d9c98-fec1-4a3c-82ff-53295d9d5c9b'
def service_pom_version_tag='avreg.version'
def service_name="avreg"
def service_version="1.0.13"
def service_cookbook_version="1.0.13"
def service_deploy_input_files_folder="/home/kookalko/pipeline/services/avreg"


def cd_git_url='https://github.com/WPPg2/DevOps-Deployment.git'
def cd_git_credentialsId='7a9d9c98-fec1-4a3c-82ff-53295d9d5c9b'
def cd_mvn_home="/opt/apache-maven-3.2.5"
def cd_node_build="CTF"
def cd_node_deploy="AMIBuilder"

def lc = new com.hp.wpp.cd.pipelines.libcommon()


stage 'Build'
     node(cd_node_build) {
          service_version = lc.checkOut("$service_git_credentialsId","$service_git_url","$service_pom_version_tag")
          echo "$service_version"
         // lc.mvnBuild("${cd_mvn_home}/bin/mvn","$service_version")
     }

stage 'Deploy'
     lc.copy_files_to_node_workspace(cd_node_deploy,service_deploy_input_files_folder)
     
     node(cd_node_deploy) {
          lc.deploy_service()
     }













/*
def deploy_service(slave,files_folder) {

   sh "sudo chef-client -z -j /home/ec2-user/avreg/deploy_avreg.json -r 'recipe[ec2::deployService]' --log_level info"

   sh "cat /home/ec2-user/avreg.log.ipaddr" 

}





def copy_files_to_node_workspace(node_name,folder)  {
     
     def basedir = new File(folder)


     files = basedir.listFiles()
     fileNames= []
     filePaths = []
    

     for (currentFile in files) { 
          filePaths.push(currentFile.path)
          fileNames.push(currentFile.name)
     }
     
                     
     for (filePath in filePaths) { 
          File f = new File(filePath)
          def fileContent = f.getText()
          def fileName=f.name
          f=null

          def slurper = new JsonSlurper()
          slurped = slurper.parseText( jsonText )
          slurped.service.artifact_url="sdfskkkkddddd"
          def builder = new JsonBuilder(slurped) 

          def content = builder.toPrettyString() 

          currentFile=null
   
          node(node_name) {
               writeFile file: fileName, text: fileContent
          }
     }
}




stage 'Check'
echo "Stage check"


//Properties props = new Properties()
//File propsFile = new File('/tmp/var.groovy')
//props.load(propsFile.newDataInputStream())
//println props.getProperty('vara')






parallel(firstTask: {
     node('CTF') {
       // Do some stuff]
       echo "First parallel task"
    }
}, secondTask: {
    node('AMIBuilder') {
        // Do some other stuff
        echo "Second parallel task"
    }
})
*/


