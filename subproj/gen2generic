
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper


// Globals
def mvnHome = "/opt/apache-maven-3.2.5"
def build_version
def sha1


def repo="sdf"

def service_git_url='https://github.com/WPPg2/avatar-reg.git'
def service_git_credentialsId='7a9d9c98-fec1-4a3c-82ff-53295d9d5c9b'
def service_pom_version_tag='avreg.version'
def service_name="avreg"
def service_version="1.0.13"
def service_cookbook_version="1.0.13"
def service_deploy_input_file="/home/kookalko/pipeline/services/avreg/service_deploy_input.json"
def service_cd_deploy_input_file="/home/kookalko/pipeline/services/avreg/service_cd_deploy_input.json"


def cd_git_url='https://github.com/WPPg2/DevOps-Deployment.git'
def cd_git_credentialsId='7a9d9c98-fec1-4a3c-82ff-53295d9d5c9b'
def commit_id="cmtid"



stage 'Check'
echo "Stage check"


//Properties props = new Properties()
//File propsFile = new File('/tmp/var.groovy')
//props.load(propsFile.newDataInputStream())
//println props.getProperty('vara')






parallel(firstTask: {
     node('CTF') {
       // Do some stuff]
       echo "First parallel task"
    }
}, secondTask: {
    node('AMIBuilder') {
        // Do some other stuff
        echo "Second parallel task"
    }
})
   
   
stage 'Build'
   node('CTF') {
   
       def mb = new com.hp.wpp.cd.pipelines.mavenBuild()
       service_version = mb.checkOut("$service_git_credentialsId","$service_git_url","$service_pom_version_tag")
       echo "$service_version"
    
       //mb.mvnBuild("${mvnHome}/bin/mvn","$build_version")
       echo "Build Stage"
   }

stage 'Deploy'
   def service_deploy_input_file_content = readFile service_deploy_input_file
   node('AMIBuilder') {
       def workspace = pwd()
       echo "Workspace is ${workspace}"
       writeFile file: {workspace}/service_cd_deploy_input.json, text: service_deploy_input_file_content
       
       git credentialsId: "$cd_git_credentialsId", url: "$cd_git_url"
       deploy_service(workspace,service_cd_deploy_input_json,service_deploy_input_json)
   }

def deploy_service(workspace,cd_deploy_input_json,deploy_input_json) {
   // new File("${workspace}/cd_deploy_input.json").write(cd_deploy_input_json)
   

   print "$cd_deploy_input_json"
   sh "echo $cd_deploy_input_json > ${workspace}/deploy_input.json"
   sh "cat ${workspace}/deploy_input.json"
   

   sh "sudo chef-client -z -j /home/ec2-user/avreg/deploy_avreg.json -r 'recipe[ec2::deployService]' --log_level info"

   sh "cat /home/ec2-user/avreg.log.ipaddr"

}

def json_input(node_name,src_file,dest_file)  {

   File f = new File(src_file)
   def jsonText = f.getText()

   def slurper = new JsonSlurper()
   slurped = slurper.parseText( jsonText )
   slurped.service.artifact_url="sdfskkkkddddd"
   def builder = new JsonBuilder(slurped)

   def output = builder.toPrettyString()
   
   
   slurper = null
   slurped=null
   builder = null
   f=null
   g=null
   
   node(node_name) {
      writeFile file: dest_file, text: output
      
   }
  
}




